openapi: 3.0.1
info:
  title: EazyShop Products APIs Definition
  description: EazyShop Demo Application
  contact:
    name: Facilitate Organizations with their API-first strategy
    url: https://www.linkedin.com/in/shubhojit-dasgupta/
    email: shubhojit.dasgupta@gmail.com
  license:
    name: EazyShop Apache License
    url: https://github.com/Brisinger/openapi/blob/master/LICENSE
  version: v0.0.1
externalDocs:
  description: My Resume
  url: https://1drv.ms/b/s!Ar05itH4diJzvP4l35OUKHUw0WJ_9w?e=V4WhAz
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: Category
paths:
  /orders:
    get:
      tags:
      - order-controller
      operationId: getOrderDetails
      parameters:
      - name: orderId
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Order"
    put:
      tags:
      - order-controller
      operationId: updateOrderDetails
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
    post:
      tags:
      - order-controller
      operationId: saveOrderDetails
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: integer
                format: int32
    delete:
      tags:
      - order-controller
      operationId: deleteOrderDetails
      parameters:
      - name: orderId
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /products:
    get:
      tags:
      - product-controller
      operationId: getProducts
      parameters:
      - name: categoryId
        in: query
        required: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
  /products/{productId}:
    get:
      tags:
      - product-controller
      operationId: getProductDetails
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Product"
  /categories:
    get:
      tags:
      - Category
      summary: Get category details
      operationId: getCategories
      parameters:
      - name: categoryId
        in: query
        required: false
        schema:
          type: integer
          format: int32
      responses:
        "400":
          description: Invalid id supplied
        "404":
          description: Category not found
        "200":
          description: Found the Category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
  /categories/{categoryId}:
    get:
      tags:
      - Category
      summary: Get category details using path param
      operationId: getCategoryDetails
      parameters:
      - name: categoryId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Category"
components:
  schemas:
    Address:
      type: object
      properties:
        addressLine:
          type: string
        city:
          type: string
        state:
          type: string
        zipcode:
          type: string
    Order:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: "#/components/schemas/Product"
        address:
          $ref: "#/components/schemas/Address"
    Product:
      type: object
      properties:
        productId:
          type: integer
          format: int32
        name:
          type: string
        price:
          type: number
        categoryName:
          type: string
        quantity:
          type: integer
          format: int32
    Category:
      type: object
      properties:
        categoryId:
          type: integer
          format: int32
        name:
          type: string
